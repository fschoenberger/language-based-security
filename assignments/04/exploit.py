import subprocess
import time

# Program is called with ./a.out <PASSWORD>
def measure_time(password):
    start_time = time.time()
    result = subprocess.run(["./a.out", password], stdout=subprocess.DEVNULL)
    end_time = time.time()
    return end_time - start_time, result.returncode

def average_time(password, runs=1):
    total_time = 0
    for _ in range(runs):
        elapsed_time, _ = measure_time(password)
        total_time += elapsed_time
    return total_time / runs

# Brute-force the password without knowing its length
guessed_password = ""
max_length = 128  # Reasonable upper limit to stop brute-forcing
charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

while True:
    best_time = 0
    best_char = ""

    for c in charset:
        test_password = guessed_password + c
        elapsed_time = average_time(test_password)

        # If the program returns 0, the password is correct
        if subprocess.run(["./a.out", test_password], stdout=subprocess.DEVNULL).returncode == 0:
            guessed_password += c
            print(f"Password found: {guessed_password}")
            exit(0)

        # Find the character with the longest execution time
        if elapsed_time > best_time:
            best_time = elapsed_time
            best_char = c

    guessed_password += best_char
    print(f"Guessed so far: {guessed_password}")

    # Stop if the guessed password is too long (likely wrong)
    if len(guessed_password) > max_length:
        print("Password guessing failed (exceeded max length)")
        break